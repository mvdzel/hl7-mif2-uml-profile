<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="urn:hl7-org:v3/mif2" xmlns:mif="urn:hl7-org:v3/mif2" xmlns:saxon="http://saxon.sf.net/" exclude-result-prefixes="saxon mif">  <xsl:output name="normalized" method="xml" version="1.0" encoding="UTF-8" indent="no" omit-xml-declaration="yes"/>  <!-- Resources -->  <xsl:variable name="approvalStatus">    <code new="affd" old=""/>    <code new="affi" old="Affiliate Ballot - Informative"/>    <code new="affn" old="Affiliate Ballot - Normative"/>    <code new="appad" old="Approved Affiliate DSTU"/>    <code new="appai" old="Approved Affiliate Informative Standard"/>    <code new="appan" old="Approved Affiliate Normative Standard"/>    <code new="appd" old="Approved DSTU"/>    <code new="appi" old="Approved Informative Standard"/>    <code new="appn" old="Approved Normative Standard"/>    <code new="comi" old="Committee Ballot - Informative"/>    <code new="comn" old="Committee Ballot - Normative"/>    <code new="draft" old="Draft"/>    <code new="loc" old="Localized Adaptation"/>    <code new="memd" old="Membership Ballot - DSTU"/>    <code new="memi" old="Membership Ballot - Informative"/>    <code new="memn" old="Membership Ballot - Normative"/>    <code new="ns" old="Non-standard - Available for use"/>    <code new="prop" old="Proposal"/>    <code new="wd" old="Withdrawn"/>    <code new="ref" old="Reference"/>  </xsl:variable>  <xsl:variable name="voteResolution">    <!-- Affirmative resolutions weren't supported due to error -->    <code new="affdef" old="Affirmative-Deferred"/>    <code new="affi" old="Affirmative-Incorporated"/>    <code new="affr" old="Affirmative-Rejected"/>    <code new="nonsubp" old="Non-Substantive Proposed"/>    <code new="nonsubv" old="Non-Substantive Voted"/>    <code new="notrelp" old="Not Related Proposed"/>    <code new="notrelv" old="Not Related Voted"/>    <code new="prevcons" old="Previously Considered"/>    <code new="retract" old="Retracted"/>    <code new="unresolved" old="Unresolved"/>    <code new="withdraw" old="Withdrawn"/>  </xsl:variable>  <xsl:variable name="changeResolution">    <!-- Affirmative resolutions weren't supported due to error -->    <code new="Approved-Deferred" old="Affirmative-Deferred"/>    <code new="Approved" old="Affirmative-Incorporated"/>    <code new="Rejected" old="Affirmative-Rejected"/>    <code new="" old="Non-Substantive Proposed"/>    <code new="" old="Non-Substantive Voted"/>    <code new="" old="Not Related Proposed"/>    <code new="" old="Not Related Voted"/>    <code new="" old="Previously Considered"/>    <code new="" old="Retracted"/>    <code new="" old="Unresolved"/>    <code new="" old="Withdrawn"/>  </xsl:variable>  <xsl:variable name="submissionResolution">    <!-- Affirmative resolutions weren't supported due to error -->    <code new="affdef" old=""/>    <code new="affi" old=""/>    <code new="affr" old=""/>    <code new="nonsubp" old="Non-Substantive Proposed"/>    <code new="nonsubv" old="Non-Substantive Voted"/>    <code new="notrelp" old="Not Related Proposed"/>    <code new="notrelv" old="Not Related Voted"/>    <code new="prevcons" old="Previously Considered"/>    <code new="retract" old="Retracted"/>    <code new="unresolved" old="Unresolved"/>    <code new="withdraw" old="Withdrawn"/>  </xsl:variable>  <!--'    - ******************    - ** Convert Down **    - ******************    -->  <!-- Standard rules -->  <xsl:template mode="Do2.2.0to2.1.6" match="node()">    <xsl:param name="toVersion"/><xsl:message select="name(.)"/>    <xsl:variable name="firstPass">      <xsl:apply-templates mode="from2.2.0to2.1.6" select="self::node()"/>    </xsl:variable>    <xsl:choose>      <xsl:when test="$toVersion='2.1.6'">        <xsl:copy-of select="$firstPass"/>      </xsl:when>      <xsl:otherwise>        <xsl:apply-templates mode="Do2.1.6to2.1.5" select="$firstPass">          <xsl:with-param name="toVersion" select="$toVersion"/>        </xsl:apply-templates>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="node()|@*">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()|@*"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="text()[normalize-space(.)='']"/>  <xsl:template mode="from2.2.0to2.1.6" match="@schemaVersion[.='2.2.0']">    <xsl:attribute name="schemaVersion" select="'2.1.6'"/>  </xsl:template>  <!-- Version-specific rules -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:data">    <!-- Don't apply changes to the XML content of a 'data' element -->    <xsl:copy-of select="."/>  </xsl:template>  <!-- core-base -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:artifactComponent">    <mif:supplementedObject>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </mif:supplementedObject>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="*[self::mif:supplementedArtifact or self::mif:supplementArtifact]/mif:artifact">    <mif:supplementedObject>      <xsl:for-each select="@*[not(name(.)='combinedId')]">        <xsl:choose>          <xsl:when test="name(.)='releaseDate' or name(.)='section' or name(.)='subSection' or name(.)='artifactName'">            <xsl:message>Error: MIF versions prior to 2.2.0 do not support releaseDate, artifactName, section or subSection.  They have been removed</xsl:message>          </xsl:when>          <xsl:otherwise>            <mif:param name="{name(.)}" value="{.}"/>          </xsl:otherwise>        </xsl:choose>      </xsl:for-each>    </mif:supplementedObject>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:supplementArtifact/*[self::mif:subject or self::mif:approvalInfo or self::mif:realmNamespace]">    <xsl:message>Error: MIF versions prior to 2.2.0 cannot supplement elements with subject, approvalInfo or realmNamespaces.  These supplement items have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:containedItem">    <xsl:message>MIF versions prior to 2.2.0 do not support nested items when supplementing artifacts.  They have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@approvalCategory">    <xsl:message>MIF versions prior to 2.2.0 do not support approvalCategory.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:requirements[position()&gt;1]">    <xsl:message>MIF versions prior to 2.2.0 do not more than one repetition of the "requirements" annotation.  Extra repetitions have been removed</xsl:message>  </xsl:template>  <!-- Drop support for cascadeInfo, annotationsReviewedBy, combinedBy, @prependAnnotationId, @appendAnnotationId, mapping/@name, mapping/businessName, @hashCode in the reverse -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:historyItem/mif:description|mif:derivedFrom/mif:reason|mif:estimate/mif:description|mif:renderingNotes|mif:legalese/mif:notation|mif:legalese/mif:disclaimer|mif:licenseTerms|mif:versioningPolicy|mif:timingBackground|mif:internalMapping|mif:documentContent|mif:receiverResponsibility/mif:reason|mif:renderedText|mif:precedingText|mif:followingText|mif:termDefinition/mif:definition|mif:testScenario/mif:objective|mif:preConditions|mif:expectedPostConditions|mif:interactionTest/mif:objective|mif:documentTest/mif:objective|mif:dataVariation|mif:partitionMechanism|mif:partitionDefinition|mif:contactInformation|mif:existingContent|mif:suggestedReplacement">    <xsl:if test="count(mif:text)&gt;1">      <xsl:message select="concat('Warning: Prior to MIF 2.2.0, ', name(.), ' does not support multiple translations or realm variants.  Only the first one has been taken')"/>    </xsl:if>    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:text[1]/node()"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:environmentalOccurrence/mif:description|mif:narrative/mif:description">    <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:text[1]"/>    <xsl:if test="count(mif:text)&gt;1">      <xsl:message>Warning: Only one translation is supported for enironmentalOccurrence/mif:description and mif:narrative/mif:description.  The first has been retained, the remainder dropped.</xsl:message>    </xsl:if>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:vocabularyGuidance">    <xsl:message>MIF versions prior to 2.2.0 do not support capturing vocabularyGuidance.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="*[self::mif:text or self::mif:data]/@isSource"/>  <xsl:template mode="from2.2.0to2.1.6" match="*[self::mif:text or self::mif:data]/@lastEdited">    <xsl:if test="not(parent::*/@isSource='true')">      <xsl:attribute name="lastTranslated" select="."/>    </xsl:if>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:resolution/@implementedDate|mif:resolution/@implementingPersonName"/>  <xsl:template mode="from2.2.0to2.1.6" match="mif:changeRequest/mif:resolution">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>      <vote motionBy="No-one" secondedBy="No-one" inFavour="0" opposed="0" abstain="0">        <xsl:comment>Inserted to allow validation</xsl:comment>      </vote>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:ballotComment">    <xsl:copy>      <xsl:copy-of select="mif:resolution/@implementedDate|mif:resolution/@implementingPersonName"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()|@*"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@commentType">    <xsl:attribute name="commentType" select="normalize-space(substring-before(., '-'))"/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:changeRequest/@isSubstantiveChange|mif:changeRequest/@isBackwardCompatibleChange">    <xsl:message>Warning: Prior to MIF 2.2.0, change requests could not capture whether a change was substantive or backward compatible.  This information has been removed.</xsl:message>  </xsl:template>  <!-- Todo: resolutions are restricted  <xsl:template mode="from2.2.0to2.1.6" match="mif:changeRequest/mif:resolution/@resolution[not(.='Approved' or .='ApprovedDeferred' or .='Rejected')]">    <xsl:message select="concat('Specified resolution is n"  </xsl:template> -->  <xsl:template mode="from2.2.0to2.1.6" match="*[mif:packageLocation]">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*"/>      <xsl:call-template name="HandlePackageLocation"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()"/>    </xsl:copy>  </xsl:template>  <xsl:template name="HandlePackageLocation">    <xsl:for-each select="mif:packageLocation">      <xsl:choose>        <xsl:when test="@version">          <xsl:attribute name="packageKind" select="'version'"/>          <xsl:attribute name="name" select="@version"/>        </xsl:when>        <xsl:when test="@id">          <xsl:attribute name="packageKind" select="'id'"/>          <xsl:attribute name="name" select="@id"/>        </xsl:when>        <xsl:when test="@name">          <xsl:attribute name="packageKind" select="'name'"/>          <xsl:attribute name="name" select="@name"/>        </xsl:when>        <xsl:when test="@domain">          <xsl:attribute name="packageKind" select="'domain'"/>          <xsl:attribute name="name" select="@domain"/>        </xsl:when>      </xsl:choose>    </xsl:for-each>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:renderingInformation[position()&gt;1]">    <xsl:message>Warning: MIF versions prior to 2.2.0 do not support more than one renderingInformation repetitions.  Only one the first repetition has been retained.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:responsibleGroup/mif:email">    <xsl:message>Warning: MIF versions prior to 2.2.0 do not support Email for responsible group.  It has been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:valueSetRef/@*[name(.)='rootCode' or name(.)='rootCodeIncluded']">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support value set references using rootCode</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:derivedFrom[ancestor::mif:annotations]">    <derivationSupplier>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()|@*"/>    </derivationSupplier>  </xsl:template>  <!-- mif-core-enumerations -->  <xsl:template mode="from2.2.0to2.1.6" match="@artifact[.='SIM']|mif:param[@name='artifact']/@value[.='SIM']">    <xsl:attribute name="{name(.)}" select="'CIM'"/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:approvalInfo/@approvalStatus|mif:ballotSubmission/@status">    <xsl:variable name="code" select="$approvalStatus/mif:code[@new=current()]/@old"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for ballot submission status code ', ., ' in MIF 2.1.6.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:ballotComment/mif:resolution/@resolution">    <xsl:variable name="code" select="$voteResolution/mif:code[@new=current()]/@old"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for ballot comment resolution code ', ., ' in MIF 2.1.6.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:changeRequest/mif:resolution/@resolution">    <xsl:variable name="code" select="$changeResolution/mif:code[@new=current()]/@old"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for change request resolution code ', ., ' in MIF 2.1.6.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:ballotSubmission/@resolution">    <xsl:variable name="code" select="$submissionResolution/mif:code[@new=current()]/@old"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for ballot submission resolution code ', ., ' in MIF 2.1.6.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <!-- Todo: Remove artifact types TP and ITS -> change to SIM and DOC, respectively with warning -->  <xsl:template mode="from2.2.0to2.1.6" match="@artifact[.='EX' or .='TS']|mif:param[@name='artifact']/@value[.='EX' or .='TS']">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support artifact types EX (Example) or TS (Test Scenario)</xsl:message>    <xsl:attribute name="{name(.)}" select="'CIM'"/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:changeRequest/@status[.='Decided']">    <xsl:variable name="decision">      <xsl:for-each select="parent::mif:changeRequest/mif:resolution">        <xsl:choose>          <xsl:when test="@resolution='Rejected'">Rejected</xsl:when>          <xsl:otherwise>Approved</xsl:otherwise>        </xsl:choose>      </xsl:for-each>    </xsl:variable>    <xsl:attribute name="{name(.)}" select="$decision"/>  </xsl:template>  <!-- mif-core-staticBase -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:valueSetAssertion">    <!-- On reverse, need to check name -->    <mif:valueSet>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@revisionFrequency"/>      <xsl:for-each select="mif:maximumValueSet">        <xsl:apply-templates mode="from2.2.0to2.1.6" select="@id|@versionDate|@versionTime|@name|@rootCode|@codingStrength"/>      </xsl:for-each>      <xsl:for-each select="mif:minimumValueSet">        <xsl:if test="@id">          <xsl:attribute name="minimumValueSet" select="@id"/>        </xsl:if>      </xsl:for-each>      <xsl:for-each select="mif:ignoredValueSet">        <xsl:if test="@id">          <xsl:attribute name="ignoredValueSet" select="@id"/>        </xsl:if>      </xsl:for-each>      <xsl:if test="@staticBindingDate">        <xsl:message>Error: MIF versions prior to 2.2.0 do not support staticBindingDates on Value set assertions</xsl:message>      </xsl:if>      <xsl:if test="count(mif:minimumValueSet/@*[name(.)!='id'])!=0">        <xsl:message>Error: MIF versions prior to 2.2.0 don't properly support minimuValueSet declarations - they only allow an OID and nothing else.</xsl:message>      </xsl:if>      <xsl:if test="count(mif:ignoredValueSet/@*[name(.)!='id'])!=0">        <xsl:message>Error: MIF versions prior to 2.2.0 don't properly support ignoredValueSet declarations - they only allow an OID and nothing else.</xsl:message>      </xsl:if>      <xsl:if test="mif:maximumValueSet/@rootCodeIncluded[.!='true']">        <xsl:message>Error: MIF versions prior to 2.2.0 do not support inferred value set definitions that exclude the root code</xsl:message>      </xsl:if>    </mif:valueSet>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@businessSortKey|@doNotCollapseIndicator"/>  <xsl:template mode="from2.2.0to2.1.6" match="mif:businessName[position()=1]/@name">    <xsl:variable name="name">      <xsl:choose>        <xsl:when test="ancestor::mif:serializableStaticModel">          <xsl:if test="ancestor::mif:targetConnection[1][@doNotCollapseIndicator='true']">*</xsl:if>        </xsl:when>        <xsl:when test="ancestor::mif:staticModel">          <xsl:if test="ancestor::mif:staticModel/mif:association/mif:traversableConnection[@participantClassName=current()/parent::mif:businessName/parent::mif:class/@name][@doNotCollapseIndicator='true']">*</xsl:if>        </xsl:when>      </xsl:choose>      <xsl:if test="parent::mif:businessName/parent::*/@businessSortKey">        <xsl:value-of select="concat(parent::mif:businessName/parent::*/@businessSortKey, ':')"/>      </xsl:if>      <xsl:value-of select="."/>    </xsl:variable>    <xsl:attribute name="name" select="$name"/>  </xsl:template>  <!-- mif-model-annotationLibrary -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:importedAnnotationLibrary">    <mif:importAnnotationLibrary>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </mif:importAnnotationLibrary>  </xsl:template>  <!-- mif-model-datatype -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:importedDatatypeModelLibrary">    <mif:importDatatypeModelLibrary>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </mif:importDatatypeModelLibrary>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:property/mif:vocabularyDeclaration">    <vocabularySpecification>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </vocabularySpecification>  </xsl:template>  <!-- mif-model-dynamic -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:stateTransition[position()&gt;1]">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support more than one state transition for a trigger event.  Extra transitions have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:environmentalOccurrence/mif:description">    <text>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </text>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:relatedStateTransition[position()&gt;1]">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support more than one state transition for an environmental-occurrence for a trigger event.  Extra transitions have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:receiverResponsibility">    <receiverResponsibilities>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*"/>      <xsl:if test="not(mif:reason)">        <reason/>      </xsl:if>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()"/>    </receiverResponsibilities>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:documentDefinition">    <DocumentDefinition>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </DocumentDefinition>  </xsl:template>  <!-- mif-model-interface -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:stub">    <templateParameter>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </templateParameter>  </xsl:template>  <!-- Todo: drop commonModelElementDefinition/derivedFrom -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:commonModelElementDefinition/@rootCode"/>  <xsl:template mode="from2.2.0to2.1.6" match="mif:commonModelElementDefinition">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*[not(name(.)='rootCode')]"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|mif:businessName|mif:historyItem"/>      <xsl:if test="@rootCode">        <xsl:variable name="codeSystem">          <xsl:choose>            <xsl:when test="@entryKind='Act'">2.16.840.1.113883.5.6</xsl:when>            <xsl:when test="@entryKind='Entity'">2.16.840.1.113883.5.41</xsl:when>            <xsl:when test="starts-with(@entryKind,'Role')">2.16.840.1.113883.5.110</xsl:when>          </xsl:choose>        </xsl:variable>        <definingVocabulary>          <code code="{@rootCode}" codeSystem="{$codeSystem}"/>        </definingVocabulary>      </xsl:if>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="*[not(self::mif:businessName or self::mif:historyItem)]"/>    </xsl:copy>  </xsl:template>  <!-- mif-model-package -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:package/*[self::glossary or self::artifactRef or self::supplementedArtifact]">    <xsl:message>MIF versions prior to 2.2.0 do not support glossary, artifactRef or supplementedArtifact items as content of a package.</xsl:message>  </xsl:template>  <!-- mif-model-package -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:narrative/mif:packageLocation">    <deprecatedPackageLocation>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </deprecatedPackageLocation>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:narrative/mif:description">    <text>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </text>  </xsl:template>  <!-- mif-model-staticBase -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:importedInterfacePackage">    <importedCommonModelElementPackage>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </importedCommonModelElementPackage>  </xsl:template>  <!-- Todo: drop importedStubPackage, datatypeLimitation, vocabularyLimitation, stewardCommittee -->  <!-- Todo: Constrain to 1 repetition - additionalDatatypeModel, additionalVocabularyModel -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:definingCode">    <definingVocabulary>      <code>        <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>      </code>    </definingVocabulary>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@templateParameterName">    <xsl:attribute name="stubName" select="."/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:state">    <subState>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </subState>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="*[self::mif:commonModelElementRef or self::mif:stub]/@stubName"/>  <xsl:template mode="from2.2.0to2.1.6" match="mif:attribute/mif:vocabularyDeclaration">    <vocabulary>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </vocabulary>  </xsl:template>  <!-- mif-model-staticFlag -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:staticModelRef">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support direct static model references</xsl:message>  </xsl:template>  <!-- xhtml1-hl7-types -->  <!-- Todo: Remove support for object names: requirementRef -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:object[@name='divRef' or @name='propertyParameterTypeRef' or @name='propertyTypeRef']">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support markup objects of type 'divRef', 'propertyParameterTypeRef' or 'propertyTypeRef'</xsl:message>  </xsl:template>  <!-- Todo: Remove support for param names: artifactName, supplierBindingArgumentDatatype, conversionDatatype and codeSystemId -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:param[@name='hl7Id' or @name='annotationId' or @name='subSection' or @name='releaseDate' or @name='isArgumentDatatype' or @name='codeSystemId']">    <xsl:message>Error: MIF versions prior to 2.2.0 do not support markup objects of type hl7Id, annotationid, subSection, releaseDate, isArgumentDatatype, testName or spec</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:artifactComponent[@name='conceptDomainRef' or @name='codeSystemRef' or @name='valueSetRef']/mif:param/@name[.='name']">    <xsl:attribute name="name" select="'artifactName'"/>  </xsl:template>  <!-- mif-model-vocabulary -->  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeBasedContent/@sortKey">    <xsl:message>Warning: Sort information on code-based content definitions is not supported prior to MIF 2.2.0.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@codeLabel|@descriptiveName">    <xsl:message>Warning: Capturing labels for code systems or codes used in content definitions is not supported prior to MIF 2.2.0.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:postCoordinationFormat">    <xsl:message>Error: Capturing information about post-coordination format is not supported prior to MIF 2.2.0.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@isPostCoordinated">    <xsl:message>Warning: Flagging a code used in content definitions as post-coordinated is not supported prior to MIF 2.2.0.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@isPostCoordinationProhibited">    <xsl:message>Error: Prior to MIF 2.2.0 value sets cannot be marked as prohibiting post-coordination.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystem[not(@codeSystemNamespaceId)]">    <xsl:copy>      <xsl:copy-of select="@*"/>      <xsl:for-each select="mif:supportedRepresentation[@name='code']">        <xsl:copy-of select="@hasSynonymy|@hasHomonymy|@isCaseSensitive|@isWhitespaceSensitive"/>      </xsl:for-each>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:historyItem|mif:businessName|mif:header|mif:annotations|mif:propertyGroup|mif:releasedVersion"/>      <xsl:if test="mif:partitionMechanism or mif:partition">        <xsl:message select="'Error: Partition mechanisms and partitions are not supported in MIF 2.1.6.  They have been dropped'"/>      </xsl:if>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:releasedVersion">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()[not(self::mif:postCoordinatedFormat)]"/>      <xsl:if test="mif:postCoordinatedFormat">        <xsl:message select="'Error: MIF versions prior to 2.2.0 do not support capturing post coordinated format'"/>      </xsl:if>      <xsl:variable name="releaseDate" select="@releaseDate"/>      <xsl:variable name="representations">        <xsl:for-each select="parent::*/mif:supportedRepresentation">          <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">            <xsl:message>Warning: Prior to MIF 2.2.0, details of supported representations such as description, usage rules, etc. were not captured.  This information has been dropped.</xsl:message>            <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">              <xsl:message>Warning: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for supported representations.  They have been dropped and are treated as 'active'</xsl:message>            </xsl:for-each>            <xsl:if test="mif:versionInfo[@effectiveDate or @retirementDate]">              <xsl:message>Error: Prior to MIF 2.2.0, supported representations don't capture effective and retirement dates independent of the version date.  This information has been removed.</xsl:message>            </xsl:if>            <xsl:variable name="type">              <xsl:choose>                <xsl:when test="contains(@preferredForUse, 'Code')">Code</xsl:when>                <xsl:when test="contains(@preferredForUse, 'Display')">PrintName</xsl:when>                <xsl:when test="contains(@allowedForUse, 'Code')">Code</xsl:when>                <xsl:when test="contains(@allowedForUse, 'Code')">PrintName</xsl:when>                <xsl:otherwise>Other</xsl:otherwise>              </xsl:choose>            </xsl:variable>            <xsl:copy>              <xsl:attribute name="type" select="$type"/>              <xsl:copy-of select="@*|node()"/>            </xsl:copy>          </xsl:if>        </xsl:for-each>      </xsl:variable>      <xsl:if test="mif:concept">        <xsl:for-each select="$representations/mif:supportedRepresentation[@type='Other']">          <supportedConceptProperty propertyName="{@name}" type="{@representationForm}" isMandatoryIndicator="{@isComprehensive}">            <xsl:for-each select="mif:annotations/mif:documentation/mif:description/mif:text">              <description>                <xsl:apply-templates select="node()"/>              </description>            </xsl:for-each>          </supportedConceptProperty>        </xsl:for-each>        <supportedConceptProperty propertyName="status" type="Token" isMandatoryIndicator="false" defaultValue="active">          <description>Designation of a concept's state.  Normally is not populated unless the state is retired..</description>        </supportedConceptProperty>      </xsl:if>      <xsl:for-each select="parent::*/*[self::mif:supportedRelationship or self::mif:supportedProperty]">        <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">          <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">            <xsl:message>Warning: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for supported relationships and properties.  They have been dropped and are treated as 'active'</xsl:message>          </xsl:for-each>          <xsl:if test="mif:versionInfo[@effectiveDate or @retirementDate]">            <xsl:message>Error: Prior to MIF 2.2.0, supported relationships and properties don't capture effective and retirement dates independent of the version date.  This information has been removed.</xsl:message>          </xsl:if>          <xsl:apply-templates mode="from2.2.0to2.1.6" select="."/>        </xsl:if>      </xsl:for-each>      <xsl:for-each select="parent::*/mif:concept"><!--        <xsl:if test="count(mif:version/mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')])!=0">-->        <xsl:if test="count(mif:version/mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate)])!=0">          <xsl:copy>            <xsl:copy-of select="@isSelectable"/>            <xsl:copy-of select="mif:version/mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]/@effectiveDate"/>            <xsl:variable name="propertyGroupRefs">              <xsl:for-each select="mif:propertyGroupReference">                <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                  <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                    <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for property group references.  They have been dropped and are treated as 'active'</xsl:message>                  </xsl:for-each>                  <xsl:copy-of select="."/>                </xsl:if>              </xsl:for-each>            </xsl:variable>            <xsl:for-each select="$propertyGroupRefs/mif:propertyGroupReference">              <xsl:choose>                <xsl:when test="position()=1">                  <xsl:copy-of select="@propertyGroup"/>                </xsl:when>                <xsl:otherwise>                  <xsl:message>Error: Prior to MIF 2.2.0 concepts could only reference a single property group</xsl:message>                </xsl:otherwise>              </xsl:choose>            </xsl:for-each>            <xsl:for-each select="mif:version"><!--              <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">-->              <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate)]">                <xsl:apply-templates mode="from2.2.0to2.1.6" select="*[not(self::mif:versionInfo)]"/>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:relationship">              <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                  <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for code relationships.  They have been dropped and are treated as 'active'</xsl:message>                </xsl:for-each>                <xsl:apply-templates mode="from2.2.0to2.1.6" select="."/>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:representation">              <xsl:if test="count($representations/mif:supportedRepresentation[@type='Other' and @name=current()/@representationType])!=0">                <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                  <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                    <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for 'other' representations.  They have been dropped and are treated as 'active'</xsl:message>                  </xsl:for-each>                  <conceptProperty name="{@representationType}" value="{@text}"/>                </xsl:if>              </xsl:if>            </xsl:for-each>            <xsl:variable name="status" select="mif:version/mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate)]/@status"/>            <xsl:if test="$status!='active' and $status!=''">              <conceptProperty name="status" value="{$status}"/>            </xsl:if>            <xsl:for-each select="mif:property">              <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                  <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for concept properties.  They have been dropped and are treated as 'active'</xsl:message>                </xsl:for-each>                <xsl:apply-templates mode="from2.2.0to2.1.6" select="."/>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:representation[not(mif:representsCode)]">              <xsl:if test="count($representations/mif:supportedRepresentation[@type='PrintName' and @name=current()/@representationType])!=0">                <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                  <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                    <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for print names.  They have been dropped and are treated as 'active'</xsl:message>                  </xsl:for-each>                  <printName>                    <xsl:copy-of select="@language|@preferredForLanguage|@text"/>                    <xsl:if test="mif:content">                      <mif:icon>                        <xsl:for-each select="ancestor::mif:codeSystem/mif:supportedRepresentation[@name=current()/@representationType]">                          <xsl:attribute name="type" select="@representationForm"/>                        </xsl:for-each>                        <xsl:copy-of select="mif:content"/>                      </mif:icon>                    </xsl:if>                  </printName>                </xsl:if>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:representation">              <xsl:if test="count($representations/mif:supportedRepresentation[@type='Code' and @name=current()/@representationType])!=0">                <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate)]">                  <code code="{@text}">                    <xsl:copy-of select="@effectiveDate|@retirementDate"/>                    <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate)]">                      <xsl:choose>                        <xsl:when test="@status='deprecated'">                          <xsl:attribute name="status" select="'retired'"/>                          <xsl:message>Warning: Prior to MIF 2.2.0, codes did not support a status of 'deprecated'.  The status has changed to 'retired'.</xsl:message>                        </xsl:when>                        <xsl:otherwise>                          <xsl:copy-of select="@status"/>                        </xsl:otherwise>                      </xsl:choose>                    </xsl:for-each>                    <xsl:for-each select="parent::*/mif:representation[mif:representsCode[@text=current()/@text]]">                      <xsl:if test="count($representations/mif:supportedRepresentation[@type='PrintName' and @name=current()/@representationType])!=0">                        <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                          <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                            <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for codes.  They have been dropped and are treated as 'active'</xsl:message>                          </xsl:for-each>                          <printName>                            <xsl:copy-of select="@language|@preferredForLanguage|@text"/>                            <xsl:if test="mif:content">                              <mif:icon>                                <xsl:for-each select="ancestor::mif:codeSystem/mif:supportedRepresentation[@name=current()/@representationType]">                                  <xsl:attribute name="type" select="@representationForm"/>                                </xsl:for-each>                                <xsl:copy-of select="mif:content"/>                              </mif:icon>                            </xsl:if>                          </printName>                        </xsl:if>                      </xsl:if>                    </xsl:for-each>                  </code>                </xsl:if>              </xsl:if>            </xsl:for-each>          </xsl:copy>        </xsl:if>      </xsl:for-each>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:propertyGroup/mif:property/mif:versionInfo[@outVersion or @inVersion!=ancestor::mif:codeSystem/mif:releasedVersion[1]/@releaseDate or (@status and @status!='active')]">    <xsl:message>Warning: Prior to MIF 2.2.0, properties inside propertyGroups could not have version information.  It has been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:supportedLanguage">    <xsl:copy>      <xsl:value-of select="@language"/>      <xsl:if test="@isPrimary='true'">        <xsl:message>Warning: MIF versions prior to 2.2.0 do not support identifying whether a supported language is preferred.  The indicator has been removed.</xsl:message>      </xsl:if>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystemSupplement">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*"/>      <xsl:for-each select="mif:supportedRepresentation[@name='code']">        <xsl:copy-of select="@hasSynonymy|@hasHomonymy|@isCaseSensitive|@isWhitespaceSensitive"/>      </xsl:for-each>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:historyItem|mif:businessName|mif:header|mif:annotations|mif:propertyGroup|mif:codeSystemVersionSupplement"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystemVersionSupplement">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>      <xsl:variable name="releaseDate" select="@releaseDate"/>      <xsl:variable name="representations">        <xsl:for-each select="parent::*/mif:supportedRepresentation">          <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">            <xsl:message>Warning: Prior to MIF 2.2.0, details of supported representations such as description, usage rules, etc. were not captured.  This information has been dropped.</xsl:message>            <xsl:for-each select="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and @status!='active']">              <xsl:message>Warning: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for supported representations.  They have been dropped and are treated as 'active'</xsl:message>            </xsl:for-each>            <xsl:if test="mif:versionInfo[@effectiveDate or @retirementDate]">              <xsl:message>Error: Prior to MIF 2.2.0, supported representations don't capture effective and retirement dates independent of the version date.  This information has been removed.</xsl:message>            </xsl:if>            <xsl:variable name="type">              <xsl:choose>                <xsl:when test="contains(@preferredForUse, 'Code')">Code</xsl:when>                <xsl:when test="contains(@preferredForUse, 'Display')">PrintName</xsl:when>                <xsl:when test="contains(@allowedForUse, 'Code')">Code</xsl:when>                <xsl:when test="contains(@allowedForUse, 'Code')">PrintName</xsl:when>                <xsl:otherwise>Other</xsl:otherwise>              </xsl:choose>            </xsl:variable>            <xsl:copy>              <xsl:attribute name="type" select="$type"/>              <xsl:copy-of select="@*|node()"/>            </xsl:copy>          </xsl:if>        </xsl:for-each>      </xsl:variable>      <xsl:for-each select="parent::*/*[self::mif:supportedRelationship or self::mif:supportedProperty]">        <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">          <xsl:for-each select="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and @status!='active']">            <xsl:message>Warning: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for supported relationships and properties.  They have been dropped and are treated as 'active'</xsl:message>          </xsl:for-each>          <xsl:apply-templates mode="from2.2.0to2.1.6" select="."/>        </xsl:if>      </xsl:for-each>      <xsl:for-each select="parent::*/mif:conceptSupplement">        <xsl:if test="mif:version/mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">          <xsl:copy>            <xsl:attribute name="code" select="mif:baseConcept/@conceptId"/>            <xsl:copy-of select="mif:version/mif:versionInfo[1]/@effectiveDate"/>            <xsl:for-each select="mif:version">              <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">                <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:historyItem|mif:annotations"/>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:supplementalConceptRelationship">              <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">                <xsl:apply-templates mode="from2.2.0to2.1.6" select="."/>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:supplementalConceptProperty">              <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">                <xsl:apply-templates mode="from2.2.0to2.1.6" select="."/>              </xsl:if>            </xsl:for-each>            <!-- Todo: fix below this -->            <xsl:for-each select="mif:supplementalConceptRepresentation">              <xsl:if test="count($representations/mif:supportedRepresentation[@type='Other' and @name=current()/@representationType])!=0">                <xsl:if test="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and not(@status='retired')]">                  <xsl:for-each select="mif:versionInfo[@inVersion &lt;= $releaseDate and (not(@outVersion) or @outVersion &gt; $releaseDate) and @status!='active']">                    <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for 'other' representations.  They have been dropped and are treated as 'active'</xsl:message>                  </xsl:for-each>                  <supplementalConceptProperty name="{@representationType}" value="{@text}"/>                </xsl:if>              </xsl:if>            </xsl:for-each>            <xsl:for-each select="mif:supplementalConceptRepresentation[not(mif:representsCode)]">              <xsl:if test="count($representations/mif:supportedRepresentation[@type='PrintName' and @name=current()/@representationType])!=0">                <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and not(@status='retired')]">                  <xsl:for-each select="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate) and @status!='active']">                    <xsl:message>Error: Prior to MIF 2.2.0, Statuses other than 'active' and 'retired' cannot be represented for print names.  They have been dropped and are treated as 'active'</xsl:message>                  </xsl:for-each>                  <printName>                    <xsl:copy-of select="@language|@preferredForLanguage|@text"/>                    <xsl:if test="mif:content">                      <mif:icon>                        <xsl:for-each select="ancestor::mif:codeSystemSupplement/mif:supportedRepresentation[@name=current()/@representationType]">                          <xsl:attribute name="type" select="@representationForm"/>                        </xsl:for-each>                        <xsl:copy-of select="mif:content"/>                      </mif:icon>                    </xsl:if>                  </printName>                </xsl:if>              </xsl:if>            </xsl:for-each>            <xsl:variable name="representsCode">              <xsl:for-each select="mif:supplementalConceptRepresentation[mif:representsCode]">                <xsl:sort select="mif:representsCode/@code"/>                <xsl:if test="mif:versionInfo[@inSupplementVersion &lt;= $releaseDate and (not(@outSupplementVersion) or @outSupplementVersion &gt;= $releaseDate)]">                  <xsl:copy-of select="."/>                </xsl:if>              </xsl:for-each>            </xsl:variable>            <xsl:for-each select="$representsCode/mif:supplementalConceptRepresentation">              <xsl:if test="count(parent::mif:supplementalConceptRepresentation/preceding-sibling::mif:supplementalConceptRepresentation/mif:representsCode[@text=current()/@text])=0">                <codeSupplement code="{@text}">                  <xsl:for-each select="$representsCode/mif:supplementalConceptRepresentation[mif:representsCode[@text=current()/mif:representsCode/@text]]">                    <xsl:if test="count($representations/mif:supportedRepresentation[@type='PrintName' and @name=current()/@representationType])!=0">                      <printName>                        <xsl:copy-of select="@language|@preferredForLanguage|@text"/>                        <xsl:if test="mif:content">                          <mif:icon>                            <xsl:for-each select="ancestor::mif:codeSystemSupplement/mif:supportedRepresentation[@name=current()/@representationType]">                              <xsl:attribute name="type" select="@representationForm"/>                            </xsl:for-each>                            <xsl:copy-of select="mif:content"/>                          </mif:icon>                        </xsl:if>                      </printName>                    </xsl:if>                  </xsl:for-each>                </codeSupplement>              </xsl:if>            </xsl:for-each>          </xsl:copy>        </xsl:if>      </xsl:for-each>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystemSupplement/mif:supportedRelationship">    <supplementalSupportedConceptRelationship>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()[not(self::mif:versionInfo)]"/>    </supplementalSupportedConceptRelationship>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystemSupplement/mif:supportedProperty">    <supplementalSupportedConceptProperty>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*[not(name(.)='applyToValueSetsIndicator' or name(.)='defaultHandlingCode')]"/>      <xsl:if test="@applyToValueSetsIndicator or @defaultHandlingCode">        <xsl:message>Error: In MIF versions prior to 2.2.0 applyToValueSetsIndicator and defaultHandlingCode are not supported for properties in codeSystemSupplements.  They have been removed.</xsl:message>      </xsl:if>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="*[not(self::mif:versionInfo)]"/>    </supplementalSupportedConceptProperty>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:concept/mif:property">    <conceptProperty>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()[not(self::mif:versionInfo)]"/>    </conceptProperty>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:concept/mif:relationship">    <conceptRelationship>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()[not(self::mif:versionInfo)]"/>    </conceptRelationship>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:supportedRelationship">    <supportedConceptRelationship>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*[not(name(.)='connected')]|*[not(self::mif:versionInfo)]"/>    </supportedConceptRelationship>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystem/mif:supportedProperty">    <supportedConceptProperty>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*[not(name(.)='connected')]|*[not(self::mif:versionInfo or self::mif:allowedForConcepts or self::mif:requiredForConcepts)]"/>      <xsl:if test="self::mif:allowedForConcepts or self::mif:requiredForConcepts">        <xsl:message select="'In MIF 2.1.6, supported concept properties cannot define *required* or *allowed* concepts.'"/>      </xsl:if>    </supportedConceptProperty>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystem[@codeSystemNamespaceId]">    <xsl:message select="concat('Warning: Code system *', @name, '* partition *', @codeSystemNamespaceId, '* has been dropped.  Code system partitions are not supported in version 2.1.6')"/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@postCoordinationPreference">    <xsl:message>Error: Prior to MIF 2.2.0, the postCoordinationPreference could not be captured on value sets.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:supportedProperty/mif:allowedForConcepts|mif:supportedProperty/mif:requiredForConcepts">    <xsl:message>Error: Prior to MIF 2.2.0, it was not possible to capture what concepts a given supported property was allowed or required for.  This information has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:drawnFromCodeSystem">    <xsl:if test="mif:usesCodeSystemPartition">      <xsl:message>Warning: Prior to MIF 2.2.0, value sets could not identify what partitions of partitioned code systems they drew from.  This information has been dropped.</xsl:message>    </xsl:if>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:allowedRepresentation">    <xsl:message>Warning: Prior to MIF 2.2.0, value set definitions did not allow identifying allowed representations.  This restriction has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:supportedRelationship/@connected">    <xsl:message>Warning: Prior to MIF 2.2.0, the 'connected' property was not captured for supported relationships</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:allowedForSources|mif:allowedForTargets|mif:requiredForSources|mif:requiredForTargets|mif:requiredForSources|mif:unionWithContent|mif:intersectionWithContent|mif:excludeContent|mif:headCodes|mif:targetConcepts|mif:version/mif:content|mif:nonSelectableContent">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@areBaseQualifiersUnlimited"/>      <xsl:copy-of select="mif:drawnFromCodeSystem/@codeSystem"/>      <xsl:copy-of select="mif:drawnFromCodeSystem/@versionDate"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()[not(self::mif:usesCodeSystemSupplement)]"/>      <xsl:if test="mif:usesCodeSystemSupplement">        <xsl:message>Warning: Prior to MIF 2.2.0, content definitions (in value sets, code systems, etc.) do not support identifying used code system supplements.  They have been removed.</xsl:message>      </xsl:if>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:includeWithProperty">    <includeWithConceptProperty>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </includeWithConceptProperty>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:excludeWithProperty">    <excludeWithConceptProperty>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </excludeWithConceptProperty>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:allowedQualifiers/@*[name(.)='conformance' or name(.)='minimumMultiplicity' or name(.)='maximumMultiplicity' or name(.)='postCoordinationPreference' or name(.)='sortKey']">    <xsl:message select="concat('Allowed qualifiers cannot support detailed attributes such as ', name(.), ' are not supported in 2.1.6 and have been removed.')"/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:definingConcept|mif:targetConcept|mif:sourceConcept">    <xsl:copy>      <xsl:attribute name="code" select="concat(@conceptId, @code)"/>      <xsl:copy-of select="@codeSystem"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:valueSet/@use">    <xsl:message>Warning: Prior to MIF 2.2.0, valuesets did not capture information about intended use.  It has been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@statusInfo|mif:versionInfo"/>  <xsl:template mode="from2.2.0to2.1.6" match="mif:usesCodeSystem">    <supportedCodeSystem>      <xsl:value-of select="@codeSystemId"/>      <xsl:if test="mif:supportedPartition">        <xsl:message select="'Warning: MIF 2.1.6 does not support identifying supported partitions within a code system when defining value sets.'"/>      </xsl:if>    </supportedCodeSystem>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:contextBinding">    <xsl:copy>      <xsl:copy-of select="@conceptDomain|@bindingRealmName|@bindingPriority|@effectiveDate|@expiryDate"/>      <xsl:for-each select="mif:valueSetAssertion">        <xsl:if test="@revisionFrequency">          <xsl:message>Warning: Prior to MIF 2.2.0, revision frequency was not supported on context bindings.  It has been removed.</xsl:message>        </xsl:if>        <xsl:if test="@staticBindingDate">          <xsl:message>Error: Prior to MIF 2.2.0, static bindings were not supported on context bindings.  It has been removed.</xsl:message>        </xsl:if>        <xsl:for-each select="mif:maximumValueSet">          <xsl:choose>            <xsl:when test="@id">              <xsl:attribute name="valueSet" select="@id"/>              <xsl:if test="@name">                <xsl:message>Warning: Prior to MIF 2.2.0, it was not possible to convey both the name and id of a value set in a binding</xsl:message>              </xsl:if>            </xsl:when>            <xsl:otherwise>              <xsl:attribute name="valueSet" select="@name"/>            </xsl:otherwise>          </xsl:choose>          <xsl:copy-of select="@versionDate|@versionTime|@codingStrength"/>        </xsl:for-each>        <xsl:for-each select="mif:minimumValueSet">          <xsl:choose>            <xsl:when test="@id">              <xsl:attribute name="minimumValueSet" select="@id"/>              <xsl:if test="@name">                <xsl:message>Warning: Prior to MIF 2.2.0, it was not possible to convey both the name and id of a value set in a binding</xsl:message>              </xsl:if>            </xsl:when>            <xsl:when test="@name">              <xsl:attribute name="minimumValueSet" select="@name"/>            </xsl:when>            <xsl:otherwise>              <xsl:message>Error: Prior to MIF 2.2.0, bindings cannot reference value sets except by name or id.  Valueset reference has been dropped</xsl:message>            </xsl:otherwise>          </xsl:choose>        </xsl:for-each>        <xsl:for-each select="mif:ignoredValueSet">          <xsl:choose>            <xsl:when test="@id">              <xsl:attribute name="ignoredValueSet" select="@id"/>              <xsl:if test="@name">                <xsl:message>Warning: Prior to MIF 2.2.0, it was not possible to convey both the name and id of a value set in a binding</xsl:message>              </xsl:if>            </xsl:when>            <xsl:when test="@name">              <xsl:attribute name="ignoredValueSet" select="@name"/>            </xsl:when>            <xsl:otherwise>              <xsl:message>Error: Prior to MIF 2.2.0, bindings cannot reference value sets except by name or id.  Valueset reference has been dropped</xsl:message>            </xsl:otherwise>          </xsl:choose>        </xsl:for-each>      </xsl:for-each>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:historyItem"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@supplementId">    <xsl:attribute name="SupplementId" select="."/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:conceptSupplement">    <xsl:copy>      <xsl:attribute name="code" select="mif:baseConcept/@conceptId"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="*[not(self::mif:baseConcept)]"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="*[self::mif:conceptDomain or self::mif:valueSet]/mif:statusInfo">    <xsl:message>Error: StatusInfo information on concept domains and value sets is not supported prior to MIF 2.2.0.  It has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeTranslations">    <xsl:copy>      <xsl:attribute name="name" select="'FakeNameFromMIFConversion'"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*|node()"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@functionalism[.='functional']">    <xsl:attribute name="functionalism" select="'true'"/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="@functionalism[.!='functional']">    <xsl:message>Error: Prior to MIF 2.2.0 there is no support for indicating inverse-functional or functional-inverse-functional.  These indicators have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" match="mif:codeSystemSupplement/@supplementId">    <xsl:attribute name="SupplementId" select="."/>  </xsl:template>  <xsl:template mode="from2.2.0to2.1.6" priority="5" match="mif:codeSystem[@codeSystemId='2.16.840.1.113883.5.1124' and not(mif:supportedProperty[@propertyName='internalId'])]"/>  <xsl:template mode="from2.2.0to2.1.6" priority="5" match="mif:vocabularyModel">    <xsl:copy>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="@*"/>      <xsl:call-template name="HandlePackageLocation"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()[not(self::mif:contextBinding or self::mif:codeTranslations or self::mif:codeSystemSupplement)]"/>      <xsl:apply-templates mode="createBindingRealm" select="mif:codeSystem[@name='hl7Realm' or @codeSystemId='2.16.840.1.113883.5.1124']/mif:concept[mif:relationship[@relationshipName='Specializes']/mif:targetConcept[@conceptId='AffiliateRealms' or @conceptId='BindingRealms']]"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="node()[self::mif:contextBinding or self::mif:codeTranslations or self::mif:codeSystemSupplement]"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="createBindingRealm" match="mif:concept">    <bindingRealm name="{mif:representation[@representationType='code']/@text}">      <xsl:variable name="affiliate">        <xsl:choose>          <xsl:when test="mif:relationship[@relationshipName='OwningAffiliate']">            <xsl:value-of select="mif:relationship[@relationshipName='OwningAffiliate']/mif:targetConcept/@conceptId"/>          </xsl:when>          <xsl:when test="mif:property[@name='responsibleOrganization']">            <xsl:value-of select="mif:property[@name='responsibleOrganization']/@value"/>          </xsl:when>          <xsl:otherwise>            <xsl:value-of select="mif:property[@name='owningAffiliate']/@value"/>          </xsl:otherwise>        </xsl:choose>      </xsl:variable>      <xsl:attribute name="owningAffiliate" select="$affiliate"/>      <xsl:apply-templates mode="from2.2.0to2.1.6" select="mif:historyItem"/>      <xsl:for-each select="mif:representation[@representationType='printName']">        <description>          <xsl:value-of select="@text"/>        </description>      </xsl:for-each>    </bindingRealm>  </xsl:template>  <!--    - ****************    - ** Convert Up **    - ****************    -->  <!-- Standard rules -->  <xsl:template mode="Do2.1.6to2.2.0" match="node()">    <xsl:param name="toVersion"/>    <xsl:variable name="firstPass">      <xsl:apply-templates mode="from2.1.6to2.2.0" select="self::node()"/>    </xsl:variable>    <xsl:choose>      <xsl:when test="$toVersion='2.2.0'">        <xsl:copy-of select="$firstPass"/>      </xsl:when>      <xsl:otherwise>        <xsl:apply-templates mode="Do2.2.0to2.2.1" select="$firstPass">          <xsl:with-param name="toVersion" select="$toVersion"/>        </xsl:apply-templates>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="node()|@*">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="text()[normalize-space(.)='']"/>  <xsl:template mode="from2.1.6to2.2.0" match="@schemaVersion[.='2.1.6']">    <xsl:attribute name="schemaVersion" select="'2.2.0'"/>  </xsl:template>  <!-- Version-specific rules -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:data">    <!-- Don't apply changes to the XML content of a 'data' element -->    <xsl:copy-of select="."/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:supplementedObject">    <xsl:choose>      <xsl:when test="count(mif:param)=count(mif:param[@name='name' or @name='id' or @name='artifact' or @name='root' or @name='realmNamespace' or @name='domain' or @name='subArtifact' or @name='version'])">        <mif:artifact>          <xsl:for-each select="mif:param">            <xsl:attribute name="{@name}" select="@value"/>          </xsl:for-each>        </mif:artifact>      </xsl:when>      <xsl:otherwise>        <artifactComponent>          <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>        </artifactComponent>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:cascadeInfo|mif:combinedText|@prependAnnotationId|@appendAnnotationId">    <xsl:message>Error: MIF annotations no longer support cascade information as of MIF 2.2.0.  It has been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:mapping/@name|mif:mapping/mif:businessName">    <xsl:message>Warning: MIF mapping annotations no longer support names or business names as of MIF 2.2.0.  They have been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="hashCode">    <xsl:message>Warning: MIF no longer supports hash codes on packages as of MIF 2.2.0.  They have been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:changeRequest/mif:resolution/mif:vote"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:ballotComment/mif:resolution">    <xsl:copy>      <xsl:copy-of select="parent::mif:ballotComment/@implementedDate|parent::mif:ballotComment/@implementingPersonName"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:historyItem/mif:description|mif:derivationSupplier/mif:reason|mif:estimate/mif:description|mif:renderingNotes|mif:legalese/mif:notation|mif:legalese/mif:disclaimer|mif:licenseTerms|mif:versioningPolicy|mif:vocabularyGuidance|mif:timingBackground|mif:internalMapping|mif:documentContent|mif:receiverResponsibilities/mif:reason|mif:renderedText|mif:precedingText|mif:followingText|mif:termDefinition/mif:definition|mif:testScenario/mif:objective|mif:preConditions|mif:expectedPostConditions|mif:interactionTest/mif:objective|mif:documentTest/mif:objective|mif:dataVariation|mif:partitionMechanism|mif:partitionDefinition|mif:contactInformation|mif:postCoordinationFormat|mif:existingContent|mif:suggestedReplacement">    <xsl:copy>      <text>        <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>      </text>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:environmentalOccurrence/mif:text|mif:narrative/mif:text">    <description>      <text>        <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>      </text>    </description>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="*[self::mif:text or self::mif:data]/@lastTranslated">    <xsl:attribute name="lastEdited" select="."/>    <xsl:attribute name="isSource" select="'false'"/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:ballotComment/@implementedDate|mif:ballotComment/@implementingPersonName"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:resolution">    <xsl:copy>      <xsl:copy-of select="parent::*/@implementedDate|parent::*/@implementingPersonName"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="@commentType">    <!-- TODO: Remove after debugging -->    <xsl:attribute name="commentType" select="'Affirmative - Comment'"/>    <!-- TODO: End Remove after debugging -->    <xsl:message>Error: In MIF 2.2.0, the allowed values were changed in such a manner that mapping is not possible.  The comment type has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:approvalInfo/@approvalStatus|mif:ballotSubmission/@status">    <xsl:variable name="code" select="$approvalStatus/mif:code[@old=current()]/@new"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for ballot submission status code ', ., ' in MIF 2.2.0.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:ballotComment/mif:resolution/@resolution">    <xsl:variable name="code" select="$voteResolution/mif:code[@old=current()]/@new"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for ballot comment resolution code ', ., ' in MIF 2.2.0.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:changeRequest/mif:resolution/@resolution">    <xsl:variable name="code" select="$changeResolution/mif:code[@old=current()]/@new"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for change request resolution code ', ., ' in MIF 2.2.0.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:ballotSubmission/@resolution">    <xsl:variable name="code" select="$submissionResolution/mif:code[@old=current()]/@new"/>    <xsl:choose>      <xsl:when test="$code=''">        <xsl:message select="concat('Error: No support for ballot submission resolution code ', ., ' in MIF 2.2.0.  Attribute dropped.')"/>      </xsl:when>      <xsl:otherwise>        <xsl:attribute name="{name(.)}" select="$code"/>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:packageLocation">    <xsl:copy>      <xsl:copy-of select="@*"/>      <xsl:if test="count(@*[name(.)=parent::mif:packageLocation/parent::*/@packageKind])=0 and not(parent::*/@name='CMETinfo')">        <xsl:for-each select="parent::*[@packageKind]">          <xsl:attribute name="{@packageKind}" select="@name"/>        </xsl:for-each>      </xsl:if>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="*[mif:packageLocation]/@name|@packageKind"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:derivationSupplier">    <derivedFrom>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()|@*"/>    </derivedFrom>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:historyItem/@isBackwardCompatibleChange"/>  <!-- mif-core-staticBase -->  <xsl:template mode="from2.1.6to2.2.0" match="*[self::mif:vocabularySpecification or self::mif:vocabulary]/mif:valueSet">    <valueSetAssertion>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@staticBindingDate"/>      <maximumValueSet>        <xsl:apply-templates mode="from2.1.6to2.2.0" select="@id|@versionDate|@versionTime|@name|@rootCode|@codingStrength"/>      </maximumValueSet>      <xsl:if test="@minimumValueSet">        <minimumValueSet id="{@minimumValueSet}" codingStrength="CNE"/>      </xsl:if>      <xsl:if test="@ignoredValueSet">        <ignoredValueSet id="{@ignoredValueSet}" codingStrength="CNE"/>      </xsl:if>    </valueSetAssertion>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:businessName[parent::mif:class or parent::mif:attribute]/@name">    <xsl:variable name="name">      <xsl:choose>        <xsl:when test="contains(., ':')">          <xsl:value-of select="normalize-space(substring-after(., ':'))"/>        </xsl:when>        <xsl:when test="starts-with(., '*')">          <xsl:value-of select="normalize-space(substring-after(., '*'))"/>        </xsl:when>        <xsl:otherwise>          <xsl:value-of select="."/>        </xsl:otherwise>      </xsl:choose>    </xsl:variable>    <xsl:attribute name="name" select="$name"/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="*[mif:businessName[contains(@name, ':') and (parent::mif:class or parent::mif:attribute)]]">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <xsl:call-template name="extractBusinessSortKey"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </xsl:copy>  </xsl:template>  <xsl:template name="extractBusinessSortKey">    <xsl:variable name="sortKey">      <xsl:for-each select="mif:businessName[contains(@name, ':')][1]/@name">        <xsl:choose>          <xsl:when test="starts-with(., '*')">            <xsl:value-of select="normalize-space(substring-after(substring-before(., ':'), '*'))"/>          </xsl:when>          <xsl:otherwise>            <xsl:value-of select="normalize-space(substring-before(., ':'))"/>          </xsl:otherwise>        </xsl:choose>      </xsl:for-each>    </xsl:variable>    <xsl:attribute name="businessSortKey" select="$sortKey"/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:traversableConnection">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <xsl:if test="mif:participantClass/mif:class/mif:businessName[starts-with(@name, '*')] or                     ancestor::mif:staticModel/mif:containedClass/mif:class[@name=current()/@participantClassName]/mif:businessName[starts-with(@name, '*')]">        <xsl:attribute name="doNotCollapseIndicator" select="'true'"/>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </xsl:copy>  </xsl:template>  <!-- mif-model-annotationLibrary -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:importAnnotationLibrary">    <mif:importedAnnotationLibrary>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </mif:importedAnnotationLibrary>  </xsl:template>  <!-- mif-model-datatype -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:importDatatypeModelLibrary">    <mif:importedDatatypeModelLibrary>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </mif:importedDatatypeModelLibrary>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:property/mif:vocabularySpecification">    <vocabularyDeclaration>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </vocabularyDeclaration>  </xsl:template>  <!-- mif-model-dynamic -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:environmentalOccurrence/mif:description">    <text>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </text>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:receiverResponsibilities">    <receiverResponsibility>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </receiverResponsibility>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:receiverResponsibilities/mif:reason[count(node())=0]"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:DocumentDefinition">    <documentDefinition>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </documentDefinition>  </xsl:template>  <!-- mif-model-interface -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:templateParameter">    <stub name="@templateParameterName">      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </stub>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:commonModelElementDefinition/mif:derivedFrom"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:commonModelElementDefinition">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <xsl:for-each select="mif:definingVocabulary/mif:code">        <xsl:attribute name="rootCode" select="@code"/>      </xsl:for-each>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()[not(self::mif:definingVocabulary)]"/>    </xsl:copy>  </xsl:template>  <!-- mif-model-package -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:deprecatedPackageLocation">    <packageLocation>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </packageLocation>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:narrative/mif:description">    <text>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </text>  </xsl:template>  <!-- mif-model-staticBase -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:importedCommonModelElementPackage">    <importedInterfacePackage>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </importedInterfacePackage>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:importedStubPackage|mif:datatypeLimitation|mif:vocabularyLimitation">    <xsl:message>Error: In MIF 2.2.0 and on, importedStubPackage, datatypeLimitations and vocabularyLimitations are no longer supported.  They have been removed</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:stewardCommittee">    <xsl:message>Note: As of MIF 2.2.0, steward committees are no longer tracked.  This information has been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:additionalDatatypeModel[position()&gt;1]|mif:additionalVocabularyModel[position()&gt;1]">    <xsl:message>Note: As of MIF 2.2.0, only one repetition is allowed for additional datatype models and additional vocabulary models.  Extra repetitions have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:definingVocabulary">    <xsl:choose>      <xsl:when test="mif:code">        <definingCode>          <xsl:for-each select="mif:code">            <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>          </xsl:for-each>          <xsl:variable name="codeSystem">            <xsl:for-each select="parent::mif:commonModelElementDefinition">              <xsl:choose>                <xsl:when test="@entryKind='Act'">2.16.840.1.113883.5.6</xsl:when>                <xsl:when test="@entryKind='Entity'">2.16.840.1.113883.5.41</xsl:when>                <xsl:when test="starts-with(@entryKind,'Role')">2.16.840.1.113883.5.110</xsl:when>              </xsl:choose>            </xsl:for-each>          </xsl:variable>          <xsl:if test="$codeSystem!=''">            <xsl:attribute name="codeSystem" select="$codeSystem"/>          </xsl:if>        </definingCode>      </xsl:when>      <xsl:otherwise>        <xsl:message>Warning: For MIF versions 2.2.0 and above, the defining vocabulary for a CMET must be a code, not a concept domain or value set.  This information has been dropped.</xsl:message>      </xsl:otherwise>    </xsl:choose>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:templateParameter/@name">    <xsl:copy-of select="."/>    <xsl:attribute name="stubName" select="."/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:subState">    <state>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </state>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:commonModelElementRef">    <xsl:copy>      <xsl:attribute name="name" select="@cmetName"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:attribute/mif:vocabulary">    <vocabularyDeclaration>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </vocabularyDeclaration>  </xsl:template>  <!-- xhtml1-hl7-types -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:object[@name='requirementRef']">    <xsl:message>Warning: In MIF versions 2.2.0 and later, markup objects of type 'requirementRef' are no longer supported.  They have been removed.</xsl:message>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:param[@name='codeSystemId' or @name='supplierBindingArgumentDatatype' or @name='conversionDatatype']">    <xsl:message>Warning: In MIF versions 2.2.0 and later, markup parameters of type 'codeSystemId', 'supplierBindingArgumentDatatype' and 'conversionDatatype' are no longer supported.  They have been removed.</xsl:message>  </xsl:template>  <!-- xhtml1-hl7-types -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:param/@name[.='artifactName']">    <xsl:attribute name="name" select="'name'"/>  </xsl:template>  <!-- mif-model-vocabulary -->  <xsl:template mode="from2.1.6to2.2.0" match="mif:prohibitedQualifiers"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:codeSystem">    <xsl:message select="concat('Processing code system :', @name)"/>    <xsl:variable name="releases">      <xsl:for-each select="mif:releasedVersion">        <xsl:sort select="@releaseDate"/>        <date>          <xsl:value-of select="@releaseDate"/>        </date>      </xsl:for-each>    </xsl:variable>    <xsl:variable name="firstDate" select="$releases/mif:date[1]"/>    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@name|@sortKey|@title|@codeSystemId|@primaryRealm|@shemaVersion"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem|mif:businessName|mif:header|mif:annotations"/>      <xsl:call-template name="manageReleases">        <xsl:with-param name="releases" select="$releases"/>        <xsl:with-param name="content">          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:releasedVersion/mif:supportedConceptRelationship"/>        </xsl:with-param>      </xsl:call-template>      <xsl:call-template name="manageReleases">        <xsl:with-param name="releases" select="$releases"/>        <xsl:with-param name="content">          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:releasedVersion/mif:supportedConceptProperty[not(@name='internalId' or @name='status')]"/>        </xsl:with-param>      </xsl:call-template>      <xsl:if test="mif:releasedVersion/mif:concept">        <supportedRepresentation representationForm="STRING" isComprehensive="true" allowedUse="Code ConceptId" preferredForUse="Code ConceptId" name="code">          <xsl:for-each select="ancestor::mif:codeSystem">            <xsl:copy-of select="@hasSynonymy|@hasHomonymy|@isCaseSensitive|@isWhitespaceSensitive"/>          </xsl:for-each>          <versionInfo inVersion="{$firstDate}"/>        </supportedRepresentation>        <xsl:if test="mif:releasedVersion/mif:supportedConceptProperty[@propertyName='internalId']">          <supportedRepresentation representationForm="STRING" isComprehensive="true" allowedUse="ConceptId" name="internalId" hasHomonymy="false" hasSynonymy="false" isCaseSensitive="true" isWhitespaceSensitive="false">            <versionInfo inVersion="{$firstDate}"/>          </supportedRepresentation>        </xsl:if>        <supportedRepresentation representationForm="STRING" isComprehensive="true" allowedUse="Display" name="printName" preferredForUse="Display" hasHomonymy="true" hasSynonymy="false" isCaseSensitive="true" isWhitespaceSensitive="false">          <versionInfo inVersion="{$firstDate}"/>        </supportedRepresentation>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:propertyGroup|mif:releasedVersion"/>      <xsl:variable name="concepts">        <xsl:for-each select="mif:releasedVersion/mif:concept">          <xsl:sort select="mif:conceptProperty[@name='internalId']/@value"/>          <xsl:sort select="mif:code[1]/@code"/>          <xsl:sort select="parent::mif:releasedVersion/@releaseDate"/>          <xsl:apply-templates mode="from2.1.6to2.2.0" select="."/>        </xsl:for-each>      </xsl:variable>      <xsl:for-each select="$concepts/mif:concept">        <xsl:if test="count(preceding-sibling::mif:concept) mod 500=0 and position()&gt;1">          <xsl:message select="concat('Processed ', count(preceding-sibling::mif:concept), ' concepts')"/>        </xsl:if>        <xsl:if test="not(preceding-sibling::mif:concept[1]/@conceptId=current()/@conceptId)">          <xsl:copy>            <xsl:copy-of select="@isSelectable"/>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:concept[@conceptId=current()/@conceptId]/mif:version"/>              </xsl:with-param>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:concept[@conceptId=current()/@conceptId]/mif:relationship"/>              </xsl:with-param>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:concept[@conceptId=current()/@conceptId]/mif:propertyGroupReference"/>              </xsl:with-param>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:concept[@conceptId=current()/@conceptId]/mif:property"/>              </xsl:with-param>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:concept[@conceptId=current()/@conceptId]/mif:representation"/>              </xsl:with-param>            </xsl:call-template>          </xsl:copy>        </xsl:if>      </xsl:for-each>      <xsl:if test="ancestor::mif:codeSystem[@name='hl7Realm' or @codeSystemId='2.16.840.1.113883.5.1124']">        <xsl:for-each select="ancestor::mif:vocabularyModel/mif:bindingRealm">          <xsl:if test="count($concepts/mif:concept[@conceptId=current()/@name])=0">            <xsl:apply-templates mode="createBindingConcept" select=".">              <xsl:with-param name="inVersion" select="$firstDate"/>            </xsl:apply-templates>          </xsl:if>        </xsl:for-each>      </xsl:if>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:codeSystemSupplement">    <xsl:variable name="releases">      <xsl:for-each select="mif:codeSystemVersionSupplement">        <xsl:sort select="@releaseDate"/>        <date>          <xsl:value-of select="@releaseDate"/>        </date>      </xsl:for-each>    </xsl:variable>    <xsl:variable name="firstDate" select="$releases/mif:date[1]"/>    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@name|@sortKey|@title|@codeSystemId|@primaryRealm|@SupplementId|@shemaVersion"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem|mif:businessName|mif:header|mif:annotations"/>      <xsl:call-template name="manageReleases">        <xsl:with-param name="releases" select="$releases"/>        <xsl:with-param name="content">          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:codeSystemVersionSupplement/mif:supplementalSupportedConceptRelationship"/>        </xsl:with-param>        <xsl:with-param name="isSupplement" select="true()"/>      </xsl:call-template>      <xsl:call-template name="manageReleases">        <xsl:with-param name="releases" select="$releases"/>        <xsl:with-param name="content">          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:codeSystemVersionSupplement/mif:supplementalSupportedConceptProperty[not(@name='internalId' or @name='status')]"/>        </xsl:with-param>        <xsl:with-param name="isSupplement" select="true()"/>      </xsl:call-template>      <xsl:if test="mif:codeSystemVersionSupplement/mif:conceptSupplement">        <supportedRepresentation representationForm="STRING" isComprehensive="true" allowedUse="Display" name="printName" preferredForUse="Display" hasHomonymy="true" hasSynonymy="false" isCaseSensitive="true" isWhitespaceSensitive="false">          <versionInfo inVersion="{$firstDate}"/>        </supportedRepresentation>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:propertyGroup|mif:codeSystemVersionSupplement"/>      <xsl:variable name="concepts">        <xsl:for-each select="mif:codeSystemVersionSupplement/mif:conceptSupplement">          <xsl:sort select="mif:conceptProperty[@name='internalId']/@value"/>          <xsl:sort select="@code"/>          <xsl:sort select="parent::mif:codeSystemVersionSupplement/@releaseDate"/>          <xsl:apply-templates mode="from2.1.6to2.2.0" select="."/>        </xsl:for-each>      </xsl:variable>      <xsl:for-each select="$concepts/mif:conceptSupplement">        <xsl:if test="not(preceding-sibling::mif:conceptSupplement[1]/mif:baseConcept/@conceptId=current()/mif:baseConcept/@conceptId)">          <xsl:copy>            <xsl:copy-of select="@isSelectable"/>            <xsl:copy-of select="mif:baseConcept"/>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:conceptSupplement[mif:baseConcept/@conceptId=current()/mif:baseConcept/@conceptId]/mif:version"/>              </xsl:with-param>              <xsl:with-param name="isSupplement" select="true()"/>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:conceptSupplement[mif:baseConcept/@conceptId=current()/mif:baseConcept/@conceptId]/mif:supplementalConceptRelationship"/>              </xsl:with-param>              <xsl:with-param name="isSupplement" select="true()"/>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:conceptSupplement[mif:baseConcept/@conceptId=current()/mif:baseConcept/@conceptId]/mif:supplementalConceptProperty"/>              </xsl:with-param>              <xsl:with-param name="isSupplement" select="true()"/>            </xsl:call-template>            <xsl:call-template name="manageReleases">              <xsl:with-param name="releases" select="$releases"/>              <xsl:with-param name="content">                <xsl:copy-of select="$concepts/mif:conceptSupplement[mif:baseConcept/@conceptId=current()/mif:baseConcept/@conceptId]/mif:supplementalConceptRepresentation"/>              </xsl:with-param>              <xsl:with-param name="isSupplement" select="true()"/>            </xsl:call-template>          </xsl:copy>        </xsl:if>      </xsl:for-each>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:supportedLanguage">    <xsl:copy>      <xsl:attribute name="language" select="."/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:conceptRelationship">    <relationship>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="ancestor::mif:releasedVersion/@releaseDate"/>        <xsl:attribute name="uniqueId" select="concat(@relationshipName, ':', mif:targetConcept/@code)"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </relationship>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:supplementalConceptRelationship">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="ancestor::mif:codeSystemVersionSupplement/@releaseDate"/>        <xsl:attribute name="uniqueId" select="concat(@relationshipName, ':', mif:targetConcept/@code)"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:supportedConceptRelationship|mif:supplementalSupportedConceptRelationship">    <supportedRelationship>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="parent::*/@releaseDate"/>        <xsl:attribute name="uniqueId" select="@name"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </supportedRelationship>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:allowedForSources|mif:allowedForTargets|mif:requiredForSources|mif:requiredForTargets|mif:requiredForSources|mif:unionWithContent|mif:intersectionWithContent|mif:excludeContent|mif:headCodes|mif:targetConcepts|mif:version/mif:content|mif:nonSelectableContent">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@areBaseQualifiersUnlimited|mif:annotations"/>      <xsl:if test="@codeSystem">        <drawnFromCodeSystem>          <xsl:copy-of select="@codeSystem|@versionDate"/>        </drawnFromCodeSystem>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()[not(self::mif:annotations)]"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:includeWithConceptProperty">    <includeWithProperty>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </includeWithProperty>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:excludeWithConceptProperty">    <excludeWithProperty>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()"/>    </excludeWithProperty>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:includeWithCodeProperty|mif:excludeWithCodeProperty">    <xsl:message select="'Code properties have been superseded by multiple representation types.  This conversion cannot happen manually.  Valueset definitions containing includeWithCodeProperty or excludeWithCodeProperty will have to be re-formulated.  For now, this part of the value set definition has been stripped.'"/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:definingConcept|mif:targetConcept|mif:sourceConcept">    <xsl:copy>      <xsl:attribute name="conceptId" select="@code"/>      <xsl:attribute name="representationType" select="'code'"/>      <xsl:copy-of select="@codeSystem"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:releasedVersion/mif:supportedConceptProperty|mif:codeSystemVersionSupplement/mif:supplementalSupportedConceptProperty">    <supportedProperty>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="parent::*/@releaseDate"/>        <xsl:attribute name="uniqueId" select="@propertyName"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </supportedProperty>  </xsl:template>  <xsl:template name="manageReleases">    <xsl:param name="content"/>    <xsl:param name="releases"/>    <xsl:param name="isDeprecated"/>    <xsl:param name="isSupplement" select="false()"/>    <xsl:variable name="sorted">      <xsl:for-each select="$content/*">        <xsl:sort select="mif:versionContent/@uniqueId"/>        <xsl:sort select="mif:versionContent/@startDate"/>        <xsl:sort select="mif:versionContent"/>        <xsl:copy-of select="."/>      </xsl:for-each>    </xsl:variable>    <xsl:variable name="complete">      <xsl:for-each select="$sorted/*">        <xsl:copy-of select="."/>        <xsl:if test="count(preceding-sibling::*[1]/mif:versionContent[@uniqueId=current()/mif:versionContent/@uniqueId])=0">          <xsl:variable name="id" select="mif:versionContent/@uniqueId"/>          <xsl:for-each select="$releases/mif:date">            <xsl:if test="count($sorted/*/mif:versionContent[@uniqueId=$id and @startDate=current()])=0">              <xsl:variable name="date" select="."/>              <xsl:for-each select="$sorted/*/mif:versionContent[@uniqueId=$id and @startDate&lt;$date]">                <xsl:sort select="@startDate" order="descending"/>                <xsl:if test="position()=1">                  <xsl:copy>                    <xsl:copy-of select="@*"/>                    <versionContent uniqueId="{$id}" startDate="{$date}" status="retired">                      <xsl:value-of select="."/>                    </versionContent>                    <xsl:copy-of select="node()[not(self::mif:versionContent)]"/>                  </xsl:copy>                </xsl:if>              </xsl:for-each>            </xsl:if>          </xsl:for-each>        </xsl:if>      </xsl:for-each>    </xsl:variable>    <xsl:variable name="sortedComplete">      <xsl:for-each select="$complete/*">        <xsl:sort select="mif:versionContent/@uniqueId"/>        <xsl:sort select="mif:versionContent/@startDate"/>        <xsl:sort select="mif:versionContent"/>        <xsl:copy>          <xsl:copy-of select="@*|node()"/>        </xsl:copy>      </xsl:for-each>    </xsl:variable>    <xsl:for-each select="$sortedComplete/*">      <xsl:if test="count(preceding-sibling::*[1][mif:versionContent/@uniqueId=current()/mif:versionContent/@uniqueId and mif:versionContent=current()/mif:versionContent])=0">        <xsl:copy>          <xsl:copy-of select="@*[not(name(.)='conceptEffectiveDate')]"/>          <xsl:variable name="versionContents">            <xsl:for-each select="$sortedComplete/*/mif:versionContent[@uniqueId=current()/mif:versionContent/@uniqueId and (text()=current()/mif:versionContent/text() or not(text() or current()/mif:versionContent/text()))]">              <xsl:copy>                <xsl:copy-of select="@*|node()"/>              </xsl:copy>            </xsl:for-each>          </xsl:variable>          <xsl:for-each select="$versionContents/mif:versionContent">            <xsl:sort select="@startDate"/>            <xsl:if test="count(preceding-sibling::*[1][@status=current()/@status])=0">              <versionInfo>                <xsl:attribute name="inVersion" select="@startDate"/>                <xsl:if test="$isSupplement">                  <xsl:attribute name="inSupplementVersion" select="@startDate"/>                </xsl:if>                <xsl:variable name="outVersion" select="following-sibling::*[not(@status=current()/@status)][1]/@startDate"/>                <xsl:if test="$outVersion!=''">                  <xsl:attribute name="outVersion" select="$outVersion"/>                  <xsl:if test="$isSupplement">                    <xsl:attribute name="outSupplementVersion" select="$outVersion"/>                  </xsl:if>                </xsl:if>                <xsl:variable name="status">                  <xsl:choose>                    <!--                <xsl:when test="following-sibling::*[mif:versionContent/@uniqueId=current()/mif:versionContent/@uniqueId and mif:versionContent!=current()/mif:versionContent]">superceded</xsl:when>                    <xsl:when test="$outVersion!=''">retired</xsl:when>-->                    <xsl:when test="@status">                      <xsl:value-of select="@status"/>                    </xsl:when>                    <xsl:when test="$isDeprecated!=''">deprecated</xsl:when>                  </xsl:choose>                </xsl:variable>                <xsl:if test="$status!=''">                  <xsl:attribute name="status" select="$status"/>                </xsl:if>                <xsl:copy-of select="@effectiveDate|@retirementDate"/>              </versionInfo>            </xsl:if>          </xsl:for-each>          <xsl:copy-of select="node()[not(self::mif:versionContent)]"/>        </xsl:copy>      </xsl:if>    </xsl:for-each>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:releasedVersion|mif:codeSystemVersionSupplement">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem|mif:annotations|mif:publicTerminologyServer|mif:supportedLanguage"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:concept">    <xsl:copy>      <xsl:copy-of select="@isSelectable"/>      <xsl:variable name="conceptId">        <xsl:choose>          <xsl:when test="mif:conceptProperty[@name='internalId']">            <xsl:value-of select="mif:conceptProperty[@name='internalId']/@value"/>          </xsl:when>          <xsl:otherwise>            <xsl:value-of select="mif:code[1]/@code"/>          </xsl:otherwise>        </xsl:choose>      </xsl:variable>      <xsl:attribute name="conceptId" select="$conceptId"/>      <version>        <xsl:variable name="content">          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem|mif:annotations|mif:intendedUse"/>        </xsl:variable>        <versionContent>          <xsl:attribute name="startDate" select="ancestor::mif:releasedVersion/@releaseDate"/>          <xsl:copy-of select="@effectiveDate"/>          <xsl:attribute name="uniqueId" select="1"/>          <xsl:if test="mif:conceptProperty[@name='status']">            <xsl:attribute name="status" select="mif:conceptProperty[@name='status']/@value"/>          </xsl:if>          <xsl:value-of select="saxon:serialize($content, 'normalized')"/>        </versionContent>        <xsl:copy-of select="$content"/>      </version>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:conceptRelationship"/>      <xsl:if test="@propertyGroup">        <propertyGroupReference>          <xsl:copy-of select="@propertyGroup"/>          <versionContent>            <xsl:attribute name="startDate" select="ancestor::mif:releasedVersion/@releaseDate"/>            <xsl:attribute name="uniqueId" select="concat('propertyGroup:', @propertyGroup)"/>            <xsl:value-of select="@propertyGroup"/>          </versionContent>        </propertyGroupReference>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:conceptProperty[not(@name='internalId' or @name='status')]"/>      <xsl:if test="mif:conceptProperty[@name='internalId']">        <representation representationType="internalId" text="{mif:conceptProperty[@name='internalId']/@value}" language="en">          <versionContent>            <xsl:attribute name="startDate" select="ancestor::mif:releasedVersion/@releaseDate"/>            <xsl:attribute name="uniqueId" select="concat('internalId:', mif:conceptProperty[@name='internalId']/@value)"/>            <xsl:value-of select="mif:conceptProperty[@name='internalId']/@value"/>          </versionContent>        </representation>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:printName|mif:code|mif:code/mif:printName"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:conceptSupplement">    <xsl:copy>      <xsl:copy-of select="@isSelectable"/>      <xsl:variable name="conceptId">        <xsl:choose>          <xsl:when test="mif:conceptProperty[@name='internalId']">            <xsl:value-of select="mif:conceptProperty[@name='internalId']/@value"/>          </xsl:when>          <xsl:otherwise>            <xsl:value-of select="@code"/>          </xsl:otherwise>        </xsl:choose>      </xsl:variable>      <version>        <xsl:variable name="content">          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem|mif:annotations"/>        </xsl:variable>        <versionContent>          <xsl:attribute name="startDate" select="ancestor::mif:codeSystemVersionSupplement/@releaseDate"/>          <xsl:copy-of select="@effectiveDate"/>          <xsl:attribute name="uniqueId" select="1"/>          <xsl:if test="mif:conceptProperty[@name='status']">            <xsl:attribute name="status" select="mif:conceptProperty[@name='status']/@value"/>          </xsl:if>          <xsl:value-of select="saxon:serialize($content, 'normalized')"/>        </versionContent>        <xsl:copy-of select="$content"/>      </version>      <baseConcept>        <xsl:attribute name="conceptId" select="$conceptId"/>      </baseConcept>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:supplementalConceptRelationship"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:supplementalConceptProperty[not(@name='internalId' or @name='status')]"/>      <xsl:if test="mif:supplementalConceptProperty[@name='internalId']">        <supplementalConceptRepresentation representationType="internalId" text="{mif:supplementalConceptProperty[@name='internalId']/@value}" language="en">          <versionContent>            <xsl:attribute name="startDate" select="ancestor::mif:codeSystemVersionSupplement/@releaseDate"/>            <xsl:attribute name="uniqueId" select="concat('internalId:', mif:conceptProperty[@name='internalId']/@value)"/>            <xsl:value-of select="mif:conceptProperty[@name='internalId']/@value"/>          </versionContent>        </supplementalConceptRepresentation>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:printName|mif:codeSupplement/mif:printName"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:conceptProperty">    <property>      <xsl:copy-of select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="ancestor::mif:releasedVersion/@releaseDate"/>        <xsl:attribute name="uniqueId" select="concat('property:', @name, ':', @value)"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </property>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:supplementalConceptProperty">    <xsl:copy>      <xsl:copy-of select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="ancestor::mif:codeSystemVersionSupplement/@releaseDate"/>        <xsl:attribute name="uniqueId" select="concat('property:', @name, ':', @value)"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:printName">    <xsl:variable name="name">      <xsl:choose>        <xsl:when test="ancestor::mif:codeSystem">representation</xsl:when>        <xsl:otherwise>supplementalConceptRepresentation</xsl:otherwise>      </xsl:choose>    </xsl:variable>    <xsl:element name="{$name}" namespace="urn:hl7-org:v3/mif2">      <xsl:attribute name="representationType" select="'printName'"/>      <xsl:copy-of select="@*"/>      <versionContent>        <xsl:attribute name="startDate" select="concat(ancestor::mif:releasedVersion/@releaseDate, ancestor::mif:codeSystemVersionSupplement/@releaseDate)"/>        <xsl:attribute name="uniqueId" select="concat('printName:', @text, mif:icon/mif:content)"/>        <xsl:value-of select="saxon:serialize(., 'normalized')"/>      </versionContent>      <xsl:if test="parent::mif:code or parent::mif:codeSupplement">        <mif:representsCode representationType="code" text="{parent::mif:*/@code}"/>      </xsl:if>      <xsl:copy-of select="mif:icon/mif:content"/>    </xsl:element>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:concept/mif:code|mif:conceptSupplement/mif:code">    <representation representationType="code">      <xsl:attribute name="text" select="@code"/>      <versionContent>        <xsl:attribute name="startDate" select="concat(ancestor::mif:releasedVersion/@releaseDate, ancestor::mif:codeSystemVersionSupplement/@releaseDate)"/>        <xsl:attribute name="uniqueId" select="concat('code:', @code)"/>        <xsl:copy-of select="@*[not(name(.)='code')]"/>        <xsl:value-of select="@code"/>      </versionContent>      <xsl:if test="@propertyGroup|mif:conceptProperty">        <xsl:message select="'Warning: Property groups and properties are not supported on codes in MIF 2.2.0'">          <xsl:copy-of select="."/>        </xsl:message>      </xsl:if>    </representation>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:supportedCodeSystem">    <usesCodeSystem codeSystemId="{.}"/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="*[self::mif:relationship or self::mif:propertyGroup]/mif:property">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*"/>      <versionInfo inVersion="{concat(ancestor::*[self::mif:codeSystem]/mif:releasedVersion[1]/@releaseDate, ancestor::*[self::mif:codeSystemSupplement]/mif:codeSystemVersionSupplement[1]/@releaseDate)}"/>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:contextBinding">    <xsl:copy>      <xsl:copy-of select="@conceptDomain|@bindingRealmName|@bindingPriority|@effectiveDate|@expiryDate"/>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem"/>      <valueSetAssertion>        <maximumValueSet>          <xsl:choose>            <xsl:when test="starts-with(@valueSet, '2.') or starts-with(@valueSet, '1.')">              <xsl:attribute name="id" select="@valueSet"/>            </xsl:when>            <xsl:otherwise>              <xsl:attribute name="name" select="@valueSet"/>            </xsl:otherwise>          </xsl:choose>          <xsl:copy-of select="@versionDate|@versionTime|@codingStrength"/>        </maximumValueSet>        <xsl:if test="@minimumValueSet">          <xsl:message>Warning: Prior to MIF 2.2.0, minimum value sets didn't capture coding strength which is now required.  It has been defaulted to CNE.</xsl:message>          <minimumValueSet codingStrength="CNE">            <xsl:choose>              <xsl:when test="starts-with(@minimumValueSet, '2.') or starts-with(@minimumValueSet, '1.')">                <xsl:attribute name="id" select="@minimumValueSet"/>              </xsl:when>              <xsl:otherwise>                <xsl:attribute name="name" select="@minimumValueSet"/>              </xsl:otherwise>            </xsl:choose>          </minimumValueSet>        </xsl:if>        <xsl:if test="@ignoredValueSet">          <xsl:message>Warning: Prior to MIF 2.2.0, ignored value sets didn't capture coding strength which is now required.  It has been defaulted to CNE.</xsl:message>          <ignoredValueSet codingStrength="CNE">            <xsl:choose>              <xsl:when test="starts-with(@ignoredValueSet, '2.') or starts-with(@ignoredValueSet, '1.')">                <xsl:attribute name="id" select="@ignoredValueSet"/>              </xsl:when>              <xsl:otherwise>                <xsl:attribute name="name" select="@ignoredValueSet"/>              </xsl:otherwise>            </xsl:choose>          </ignoredValueSet>        </xsl:if>      </valueSetAssertion>    </xsl:copy>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="@SupplementId">    <xsl:attribute name="supplementId" select="."/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:codeTranslations/@name"/>  <xsl:template mode="from2.1.6to2.2.0" match="@functionalism[.='true']">    <xsl:attribute name="functionalism" select="'functional'"/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:codeSystemSupplement/@SupplementId">    <xsl:attribute name="supplementId" select="."/>  </xsl:template>  <xsl:template mode="from2.1.6to2.2.0" match="mif:bindingRealm"/>  <xsl:template mode="from2.1.6to2.2.0" match="mif:vocabularyModel">    <xsl:copy>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="@*|node()[not(self::mif:valueSet or self::mif:contextBinding or self::mif:codeTranslations or self::mif:codeSystemSupplement)]"/>      <xsl:if test="count(mif:codeSystem[@name='hl7Realm' or @codeSystemId='2.16.840.1.113883.5.1124'])=0 and count(mif:bindingRealm)!=0">        <xsl:call-template name="makeHL7RealmCodeSystem"/>      </xsl:if>      <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()[self::mif:valueSet or self::mif:contextBinding or self::mif:codeTranslations or self::mif:codeSystemSupplement]"/>    </xsl:copy>  </xsl:template>  <xsl:template name="makeHL7RealmCodeSystem">    <xsl:variable name="inVersion" select="'2010-08-29'"/>    <codeSystem name="hl7Realm" title="HL7Realm" codeSystemId="2.16.840.1.113883.5.1124">      <annotations>        <documentation>          <description>            <text>              <p>                <b>Description: </b>Coded concepts representing Binding Realms (used for Context Binding of terminology in HL7 models)  and/or Namespace Realms (used to help ensure unique identification of HL7 artifacts). This code system is partitioned into three sections: Affiliate realms, Binding realms and Namespace realms.  All affiliate realm codes may automatically be used as both binding realms and namespace realms.  Furthermore, affiliate realms are the only realms that have authority over the creation of binding realms.  (Note that 'affiliate' includes the idea of both international affiliates and the HL7 International organization.)  All other codes must be associated with an owning affiliate realm and must appear as a specialization of _BindingRealm or _NamespaceRealm.  For affiliates whose concepts align with nations, the country codes from ISO 3166-1 2-character alpha are used for the code when possible so these codes should not be used for other realm types.  It is recommended that binding realm and namespace codes submitted by affiliates use the realm code as a prefix to avoid possible collisions with ISO codes.  However, tooling does not currently support namepace realm codes greater than 2 characters.</p>              <p>                <i>Open Issue: </i>The name of the concept property "owningAffiliate" should be changed to better reflect that the property value is the human readable name of the organizational entity that manages the Realm identified by the Realm Code.</p>              <p>                <i>Open Issue: </i>In spite of the inability of tooling to process codes longer than 2 characters, there is at least one realm codes ('SOA') that was added that is 3 characters in length.</p>            </text>          </description>        </documentation>      </annotations>      <releasedVersion releaseDate="{$inVersion}" hl7MaintainedIndicator="true" completeCodesIndicator="true" hl7ApprovedIndicator="true">        <supportedLanguage>en</supportedLanguage>        <supportedConceptRelationship relationshipKind="Specializes" name="Specializes" inverseName="Generalizes" isNavigable="true" reflexivity="irreflexive" symmetry="antisymmetric" transitivity="transitive">          <description>The child code is a more narrow version of the concept represented by the parent code.  I.e. Every child concept is also a valid parent concept.  Used to allow determination of subsumption.  Must be transitive, irreflexive, antisymmetric.</description>        </supportedConceptRelationship>        <supportedConceptRelationship relationshipKind="Generalizes" name="Generalizes" inverseName="Specializes" isNavigable="true" reflexivity="irreflexive" symmetry="antisymmetric" transitivity="transitive">          <description>Inverse of Specializes.  Only included as a derived relationship.</description>        </supportedConceptRelationship>        <supportedConceptRelationship relationshipKind="Other" name="OwningAffiliate">          <description>Identifies the affiliate responsible for a binding realm or namespace realm code.  Must be specified for all codes that are not specializations of AffiliateRealms. <b>ConceptRelationshipProperties: </b>[<i>relationshipKind: </i>other; <i>isNavigable: </i>false; <i>functionalism: </i>functional; <i>reflexivity: </i>irreflexive; <i>symmetry: </i>antisymetric; <i>connected: </i>false; <i>transitivity: </i>antitransitive; <i>allowedForTargets: </i>all codes from the hl7PublishingSection code system; <i>requiredForSources: </i>all codes which are not equal to ZZ and are not specializations of the abstract code AffiliateRealms; <i>allowedForTargets: </i>all codes which are specializations of the abstract code AffiliateRealms;]</description>        </supportedConceptRelationship>        <!--<supportedConceptProperty propertyName="internalId" type="Token" isMandatoryIndicator="false">          <description>The internal identifier for the concept in the HL7 Access database repository.</description>        </supportedConceptProperty>-->        <supportedConceptProperty propertyName="status" type="Token" isMandatoryIndicator="false" defaultValue="active">          <description>Designation of a concept's state.  Normally is not populated unless the state is retired..</description>        </supportedConceptProperty>        <supportedConceptProperty propertyName="responsibleOrganization" type="String" isMandatoryIndicator="false">          <description>Property contains the HL7 organizational body name that owns or manages this concept and code value.</description>        </supportedConceptProperty>        <xsl:apply-templates mode="createBindingConcept" select="mif:bindingRealm">          <xsl:with-param name="inVersion" select="$inVersion"/>        </xsl:apply-templates>      </releasedVersion>    </codeSystem>  </xsl:template>  <xsl:template mode="createBindingConcept" match="mif:bindingRealm">    <xsl:param name="inVersion"/>    <concept>      <xsl:if test="mif:historyItem|mif:description">        <version>          <versionInfo inVersion="{$inVersion}"/>          <xsl:apply-templates mode="from2.1.6to2.2.0" select="mif:historyItem"/>          <xsl:for-each select="mif:description">            <annotations>              <documentation>                <definition>                  <text>                    <xsl:apply-templates mode="from2.1.6to2.2.0" select="node()"/>                  </text>                </definition>              </documentation>            </annotations>          </xsl:for-each>        </version>      </xsl:if>      <xsl:if test="count(parent::mif:bindingRealm[@name=current()/@owningAffiliate])=0">        <relationship relationshipName="Specializes">          <versionInfo inVersion="{$inVersion}"/>          <targetConcept conceptId="AffiliateRealms" representationType="code"/>        </relationship>      </xsl:if>      <property name="responsibleOrganization" value="{@owningAffiliate}">        <versionInfo inVersion="$inVersion"/>      </property>      <representation representationType="code" text="{@name}">        <versionInfo inVersion="{$inVersion}" status="active"/>      </representation>      <!--<representation representationType="internalId" text="22937" language="en">        <versionInfo inVersion="2010-08-29"/>      </representation>-->      <representation representationType="printName" language="en" preferredForLanguage="true" text="{@owningAffiliate}">        <versionInfo inVersion="{$inVersion}"/>      </representation>    </concept>  </xsl:template></xsl:stylesheet>